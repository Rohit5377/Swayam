1. Wildcard Matching
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "*"
Output: true
Explanation: '*' matches any sequence.
Example 3:

Input: s = "cb", p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.



class Solution {
    public boolean isMatch(String s, String p) {
       int n=s.length();
        int m=p.length();
        Boolean[][] dp=new Boolean[n+1][m+1];
        return helper(s,p,n-1,m-1,dp);
    }
    public Boolean helper(String s, String p, int n, int m, Boolean[][] dp){
        if(n<0 && m<0){
            return true;
        }
        if(m<0){
            return false;
        }
        if (n < 0) {
            for (int i = 0; i <= m; i++) {
                if (p.charAt(i) != '*') return false;
            }
            return true;
        }
        if(dp[n][m]!=null) return dp[n][m];
        if(s.charAt(n)==p.charAt(m) || p.charAt(m)=='?'){
            dp[n][m]= helper(s,p,n-1,m-1,dp);
        }else if(p.charAt(m)=='*'){
            dp[n][m]= helper(s,p,n-1,m,dp)||helper(s,p,n,m-1,dp);
        }else{
            dp[n][m]=false;
        }
        return dp[n][m];
    }
}



2. Search in Rotated Sorted Array II
There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
You must decrease the overall operation steps as much as possible.

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false
 

class Solution {
    public boolean search(int[] nums, int target) {
        int n=nums.length;
        int st=0;
        int end=n-1;
        while(st<=end){
            int mid=st+(end-st)/2;
            if(nums[mid]==target){
                return true;
            }else if(nums[mid]==nums[st] && nums[mid]==nums[end]){
                st++;
                end--;
            }
            else if(nums[mid]>=nums[st]){
                if(target>=nums[st] && target<nums[mid]){
                    end=mid-1;
                }else{
                    st=mid+1;
                }
            }else{
                if(target>nums[mid] && target<=nums[end]){
                    st=mid+1;
                }else{
                    end=mid-1;
                }
            }
        }
        return false;
    }
}




3. Restore IP Addresses
A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.

For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

Example 1:

Input: s = "25525511135"
Output: ["255.255.11.135","255.255.111.35"]
Example 2:

Input: s = "0000"
Output: ["0.0.0.0"]
Example 3:

Input: s = "101023"
Output: ["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]

class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> list=new ArrayList<>();
        helper(s,"",list,0,0);
        return list;
    }
    public void helper(String s, String str, List<String> list, int index, int dots){
        if(dots==3){
            if(isValid(s.substring(index))){
                str+=s.substring(index);
                list.add(str);
            }
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isValid(s.substring(index,i+1))){
                helper(s, str + s.substring(index, i + 1) + ".", list, i + 1, dots + 1);
            }
        }
    }
    public boolean isValid(String str){
        if(str.length()>3 || str.length()==0) return false;
        if(str.length()>1 && str.charAt(0)=='0') return false;
        if(str.length()>0 && Integer.parseInt(str)>255) return false;
        return true;
    }
}





4. Decode Ways
You have intercepted a secret message encoded as a string of numbers. The message is decoded via the following mapping:

"1" -> 'A'

"2" -> 'B'

...

"25" -> 'Y'

"26" -> 'Z'

However, while decoding the message, you realize that there are many different ways you can decode the message because some codes are contained in other codes ("2" and "5" vs "25").

For example, "11106" can be decoded into:

"AAJF" with the grouping (1, 1, 10, 6)
"KJF" with the grouping (11, 10, 6)
The grouping (1, 11, 06) is invalid because "06" is not a valid code (only "6" is valid).
Note: there may be strings that are impossible to decode.

Given a string s containing only digits, return the number of ways to decode it. If the entire string cannot be decoded in any valid way, return 0.

The test cases are generated so that the answer fits in a 32-bit integer.

Example 1:

Input: s = "12"

Output: 2

Explanation:

"12" could be decoded as "AB" (1 2) or "L" (12).

Example 2:

Input: s = "226"

Output: 3

Explanation:

"226" could be decoded as "BZ" (2 26), "VF" (22 6), or "BBF" (2 2 6).

Example 3:

Input: s = "06"

Output: 0

Explanation:
"06" cannot be mapped to "F" because of the leading zero ("6" is different from "06"). In this case, the string is not a valid encoding, so return 0.

 

class Solution {
    public int numDecodings(String s) {
        if(s.charAt(0)=='0'){
            return 0;
        }
        int n=s.length();
        int[] dp=new int[n+1];
        dp[0]=1;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            int one=s.charAt(i-1)-'0';
            int two=Integer.parseInt(s.substring(i-2,i));
            if(one>=1 && one<=9){
                dp[i]+=dp[i-1];
            }
            if(two>=10 && two<=26){
                dp[i]+=dp[i-2];
            }
        }
        return dp[n];
    }
}
