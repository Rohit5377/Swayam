1. Divide Two Integers
Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.

The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.

Return the quotient after dividing dividend by divisor.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.



class Solution {
    public int divide(int dividend, int divisor) {
        if(dividend==divisor) return 1;
        if (dividend == Integer.MIN_VALUE && divisor == -1) {
            return Integer.MAX_VALUE;
        }
        if(divisor==1) return dividend;
        if(dividend==-1) return -dividend;
        int s=1;
        if((dividend>0 && divisor<0) || (dividend<0 && divisor>0)){
            s=-1;
        }
        int ans=0;
        long n=Math.abs((long)dividend);
        long d=Math.abs((long)divisor);
        while(n>=d){
            int p=0;
            while(n>=d<<p) p++;

            p--;
            n-=d<<p;
            ans+=1<<p;
        }
        if(ans>=Math.pow(2,31) && s==1) return Integer.MAX_VALUE;
        if(ans>=Math.pow(2,31) && s==-1) return Integer.MIN_VALUE;
        return ans*s;
    }
}



2. Remove Nth Node From End of List
Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
 


class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode temp=head;
        int size=0;
        while(temp!=null){
            temp=temp.next;
            size++;
        }
        if(size==1){
            return null;
        }
        int idx=size-n;
        temp=head;
        if(idx==0){
            return head.next;
        }
        for(int i=0;i<idx-1;i++){
            temp=temp.next;
        }
        if(temp.next!=null)temp.next=temp.next.next;
        return head;
    }
}





3. Find First and Last Position of Element in Sorted Array
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]




class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr=new int[2];
        int first=bs(nums,target,true);
        int last=bs(nums,target,false);
        arr[0]=first;
        arr[1]=last;
        return arr;
    }
    public int bs(int[] nums, int target, boolean isFirst){
        int st=0;
        int end=nums.length-1;
        int ans=-1;
        while(st<=end){
            int mid=st+(end-st)/2;
            if(nums[mid]==target){
                if(isFirst){
                    ans=mid;
                    end=mid-1;
                }else{
                    ans=mid;
                    st=mid+1;
                }
            }else if(nums[mid]<target){
                st=mid+1;
            }else{
                end=mid-1;
            }
        }
        return ans;
    }
}

4. Combination Sum
Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []
 


class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> list1=new ArrayList<>();
        List<Integer> list=new ArrayList<>();
        rec(candidates,target,list1,list,0);
        return list1;
    }
    public void rec(int[] arr, int target,List<List<Integer>> list1, List<Integer> list, int index){
        if(target==0){
            list1.add(new ArrayList<>(list));
            return;
        }
        if(target<0){
            return;
        }
        for(int i=index;i<arr.length;i++){
            list.add(arr[i]);
            rec(arr,target-arr[i],list1,list,i);
            list.remove(list.size()-1);
        }
    }
}









